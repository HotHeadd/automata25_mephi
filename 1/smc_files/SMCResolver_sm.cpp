//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SMCResolver.sm
//

#include "SMCResolver.hpp"
#include "SMCResolver_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Name Map1::Name("Map1::Name", 1);
Map1_Amount Map1::Amount("Map1::Amount", 2);
Map1_WF_EQ Map1::WF_EQ("Map1::WF_EQ", 3);
Map1_WF_BR Map1::WF_BR("Map1::WF_BR", 4);
Map1_Literal_1 Map1::Literal_1("Map1::Literal_1", 5);
Map1_Literal_m Map1::Literal_m("Map1::Literal_m", 6);
Map1_Literal_2 Map1::Literal_2("Map1::Literal_2", 7);
Map1_OK Map1::OK("Map1::OK", 8);
Map1_False Map1::False("Map1::False", 9);

void SMCResolverState::EOS(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::Reset(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::comma(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::digit(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::eq(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::letter(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::lfbracket(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::lsbracket(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::minus(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::rfbracket(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::rsbracket(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::unknown(SMCResolverContext& context)
{
    Default(context);
}

void SMCResolverState::Default(SMCResolverContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void Map1_Default::letter(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::digit(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::lsbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::rsbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::lfbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::rfbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::eq(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::minus(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::comma(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::unknown(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::EOS(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::False);
    }
    catch (...)
    {
        context.setState(Map1::False);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Default::Reset(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Start);
    context.getState().Entry(context);


}

void Map1_Start::letter(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Name);
    context.getState().Entry(context);


}

void Map1_Name::digit(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    if (ctxt.not_too_big_name())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Name);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::digit(context);
    }


}

void Map1_Name::letter(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    if (ctxt.not_too_big_name())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Name);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::letter(context);
    }


}

void Map1_Name::lsbracket(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Amount);
    context.getState().Entry(context);


}

void Map1_Amount::digit(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    if (ctxt.not_too_big_amount())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Amount);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::digit(context);
    }


}

void Map1_Amount::rsbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.load_amount();
        context.setState(Map1::WF_EQ);
    }
    catch (...)
    {
        context.setState(Map1::WF_EQ);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_WF_EQ::eq(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::WF_BR);
    context.getState().Entry(context);


}

void Map1_WF_BR::lfbracket(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Literal_1);
    context.getState().Entry(context);


}

void Map1_Literal_1::digit(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Literal_2);
    context.getState().Entry(context);


}

void Map1_Literal_1::minus(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Literal_m);
    context.getState().Entry(context);


}

void Map1_Literal_1::rfbracket(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    if (ctxt.check_bracket())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::OK);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::rfbracket(context);
    }


}

void Map1_Literal_m::digit(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Literal_2);
    context.getState().Entry(context);


}

void Map1_Literal_2::comma(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    if (ctxt.count_amount())
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(Map1::Literal_1);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::comma(context);
    }


}

void Map1_Literal_2::digit(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Literal_2);
    context.getState().Entry(context);


}

void Map1_Literal_2::rfbracket(SMCResolverContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::OK);
    context.getState().Entry(context);


}

void Map1_OK::EOS(SMCResolverContext& context)
{
    SMCResolver& ctxt = context.getOwner();

    SMCResolverState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_False::EOS(SMCResolverContext& context)
{



}

void Map1_False::comma(SMCResolverContext& context)
{



}

void Map1_False::digit(SMCResolverContext& context)
{



}

void Map1_False::eq(SMCResolverContext& context)
{



}

void Map1_False::letter(SMCResolverContext& context)
{



}

void Map1_False::lfbracket(SMCResolverContext& context)
{



}

void Map1_False::lsbracket(SMCResolverContext& context)
{



}

void Map1_False::minus(SMCResolverContext& context)
{



}

void Map1_False::rfbracket(SMCResolverContext& context)
{



}

void Map1_False::rsbracket(SMCResolverContext& context)
{



}

void Map1_False::unknown(SMCResolverContext& context)
{



}

//
// Local variables:
//  buffer-read-only: t
// End:
//
