//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : SMCResolver.sm
//

#ifndef SMCRESOLVER_SM_H
#define SMCRESOLVER_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_Name;
class Map1_Amount;
class Map1_WF_EQ;
class Map1_WF_BR;
class Map1_Literal_1;
class Map1_Literal_m;
class Map1_Literal_2;
class Map1_OK;
class Map1_False;
class Map1_Default;
class SMCResolverState;
class SMCResolverContext;
class SMCResolver;

class SMCResolverState :
    public statemap::State
{
public:

    SMCResolverState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(SMCResolverContext&) {};
    virtual void Exit(SMCResolverContext&) {};

    virtual void EOS(SMCResolverContext& context);
    virtual void comma(SMCResolverContext& context);
    virtual void digit(SMCResolverContext& context);
    virtual void eq(SMCResolverContext& context);
    virtual void letter(SMCResolverContext& context);
    virtual void lfbracket(SMCResolverContext& context);
    virtual void lsbracket(SMCResolverContext& context);
    virtual void minus(SMCResolverContext& context);
    virtual void rfbracket(SMCResolverContext& context);
    virtual void rsbracket(SMCResolverContext& context);
    virtual void unknown(SMCResolverContext& context);

protected:

    virtual void Default(SMCResolverContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_Name Name;
    static Map1_Amount Amount;
    static Map1_WF_EQ WF_EQ;
    static Map1_WF_BR WF_BR;
    static Map1_Literal_1 Literal_1;
    static Map1_Literal_m Literal_m;
    static Map1_Literal_2 Literal_2;
    static Map1_OK OK;
    static Map1_False False;
};

class Map1_Default :
    public SMCResolverState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : SMCResolverState(name, stateId)
    {};

    virtual void letter(SMCResolverContext& context);
    virtual void digit(SMCResolverContext& context);
    virtual void lsbracket(SMCResolverContext& context);
    virtual void rsbracket(SMCResolverContext& context);
    virtual void lfbracket(SMCResolverContext& context);
    virtual void rfbracket(SMCResolverContext& context);
    virtual void eq(SMCResolverContext& context);
    virtual void minus(SMCResolverContext& context);
    virtual void comma(SMCResolverContext& context);
    virtual void unknown(SMCResolverContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void letter(SMCResolverContext& context);
};

class Map1_Name :
    public Map1_Default
{
public:
    Map1_Name(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void digit(SMCResolverContext& context);
    virtual void letter(SMCResolverContext& context);
    virtual void lsbracket(SMCResolverContext& context);
};

class Map1_Amount :
    public Map1_Default
{
public:
    Map1_Amount(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void digit(SMCResolverContext& context);
    virtual void rsbracket(SMCResolverContext& context);
};

class Map1_WF_EQ :
    public Map1_Default
{
public:
    Map1_WF_EQ(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void eq(SMCResolverContext& context);
};

class Map1_WF_BR :
    public Map1_Default
{
public:
    Map1_WF_BR(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void lfbracket(SMCResolverContext& context);
};

class Map1_Literal_1 :
    public Map1_Default
{
public:
    Map1_Literal_1(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void digit(SMCResolverContext& context);
    virtual void minus(SMCResolverContext& context);
};

class Map1_Literal_m :
    public Map1_Default
{
public:
    Map1_Literal_m(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void digit(SMCResolverContext& context);
};

class Map1_Literal_2 :
    public Map1_Default
{
public:
    Map1_Literal_2(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void comma(SMCResolverContext& context);
    virtual void digit(SMCResolverContext& context);
    virtual void rfbracket(SMCResolverContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(SMCResolverContext& context);
};

class Map1_False :
    public Map1_Default
{
public:
    Map1_False(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class SMCResolverContext :
    public statemap::FSMContext
{
public:

    explicit SMCResolverContext(SMCResolver& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    SMCResolverContext(SMCResolver& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline SMCResolver& getOwner()
    {
        return (_owner);
    };

    inline SMCResolverState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<SMCResolverState&>(*_state);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void comma()
    {
        getState().comma(*this);
    };

    inline void digit()
    {
        getState().digit(*this);
    };

    inline void eq()
    {
        getState().eq(*this);
    };

    inline void letter()
    {
        getState().letter(*this);
    };

    inline void lfbracket()
    {
        getState().lfbracket(*this);
    };

    inline void lsbracket()
    {
        getState().lsbracket(*this);
    };

    inline void minus()
    {
        getState().minus(*this);
    };

    inline void rfbracket()
    {
        getState().rfbracket(*this);
    };

    inline void rsbracket()
    {
        getState().rsbracket(*this);
    };

    inline void unknown()
    {
        getState().unknown(*this);
    };

private:
    SMCResolver& _owner;
};


#endif // SMCRESOLVER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
